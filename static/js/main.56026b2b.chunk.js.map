{"version":3,"sources":["Forms/Basic.js","Forms/Relationship.js","Forms/Physical.js","App.js","serviceWorker.js","index.js"],"names":["Basic","style","Form","Group","as","Row","controlId","Label","column","sm","Col","Control","type","custom","Relationship","Physical","styles","tabs","marginRight","marginLeft","borderWidth","borderColor","tabContent","marginTop","textAlign","width","App","className","Tabs","defaultActiveKey","id","Tab","eventKey","title","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.56026b2b.chunk.js","sourcesContent":["import React from 'react';\nimport {Col, Form, Row} from 'react-bootstrap';\n\nconst Basic = ({style}) => {\n    return (\n        <Form style={style}>\n            <Form.Group as={Row} controlId=\"entityName\">\n                <Form.Label column sm=\"3\">Name</Form.Label>\n                <Col sm=\"8\">\n                    <Form.Control type=\"text\"/>\n                </Col>\n            </Form.Group>\n            <Form.Group as={Row} controlId=\"entityDescription\">\n                <Form.Label column sm=\"3\">Description</Form.Label>\n                <Col sm=\"8\">\n                    <Form.Control as={\"textarea\"} type=\"textarea\"/>\n                </Col>\n            </Form.Group>\n            <Form.Group as={Row} controlId=\"entityEdition\">\n                <Form.Label column sm=\"3\">Edition</Form.Label>\n                <Col sm=\"8\">\n                    <Form.Control type=\"text\"/>\n                </Col>\n            </Form.Group>\n            <Form.Group as={Row} controlId=\"entityCategory\">\n                <Form.Label column sm=\"3\">Category</Form.Label>\n                <Col sm=\"8\">\n                    <Form.Control as={\"select\"} custom>\n                        <option>SciFy</option>\n                        <option>Documentary</option>\n                        <option>Journal</option>\n                        <option>Others</option>\n                    </Form.Control>\n                </Col>\n            </Form.Group>\n            <Form.Group as={Row} controlId=\"entityReleaseDate\">\n                <Form.Label column sm=\"3\">Release Date</Form.Label>\n                <Col sm=\"8\">\n                    <Form.Control type=\"date\"/>\n                </Col>\n            </Form.Group>\n        </Form>\n    )\n};\n\nexport default Basic;\n","import React from 'react';\n\nconst Relationship = ({style}) => {\n    return (\n        <p>{\"Relationships Tab\"}</p>\n    );\n};\n\nexport default Relationship;\n","import React from 'react';\nimport {Col, Form, Row} from 'react-bootstrap';\n\nconst Physical = ({style}) => {\n    return (\n        <Form style={style}>\n            <Form.Group as={Row} controlId=\"entityHeight\">\n                <Form.Label column sm=\"3\">Height</Form.Label>\n                <Col sm=\"8\">\n                    <Form.Control type=\"text\"/>\n                </Col>\n            </Form.Group>\n            <Form.Group as={Row} controlId=\"entityWidth\">\n                <Form.Label column sm=\"3\">Width</Form.Label>\n                <Col sm=\"8\">\n                    <Form.Control type=\"text\"/>\n                </Col>\n            </Form.Group>\n        </Form>\n    )\n};\n\nexport default Physical;\n","import React from 'react';\nimport {Tabs, Tab} from 'react-bootstrap';\nimport Basic from './Forms/Basic';\nimport './App.css';\nimport Relationship from \"./Forms/Relationship\";\nimport Physical from \"./Forms/Physical\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Tabs defaultActiveKey=\"entity\" id=\"base\" style={styles.tabs}>\n        <Tab eventKey=\"entity\" title={\"entity\"} style={{marginTop: 5}}>\n          <Tabs id=\"entity\" defaultActiveKey={\"basic\"} style={{marginLeft: 20}}>\n            <Tab eventKey={\"basic\"} title={\"Basic Information\"}>\n              <Basic style={styles.tabContent} />\n            </Tab>\n            <Tab eventKey={\"relationship\"} title={\"Relationships\"}>\n              <Relationship style={styles.tabContent} />\n            </Tab>\n            <Tab eventKey={\"physical\"} title={\"Physical Information\"}>\n              <Physical style={styles.tabContent}/>\n            </Tab>\n          </Tabs>\n        </Tab>\n        <Tab eventKey=\"add\" title=\"+\">\n          <p>{\"Add\"}</p>\n        </Tab>\n      </Tabs>\n    </div>\n  );\n}\n\nconst styles = {\n  tabs: {\n    marginRight: 20,\n    marginLeft: 20,\n    borderWidth: 1,\n    borderColor: \"#000\",\n  },\n  tabContent: {\n    marginTop: 20,\n    textAlign: 'left',\n    marginLeft: \"10%\",\n    width: \"60%\",\n  },\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}