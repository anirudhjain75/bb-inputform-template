{"version":3,"sources":["Components/EntityTypeModal.js","Components/WorkProperties.js","Components/EditionProperties.js","Components/EditionGroupProperties.js","Components/EntitySpecificProperties.js","Components/EntityForm.js","App.js","serviceWorker.js","index.js"],"names":["EntityTypeModal","props","Modal","show","onHide","centered","Header","closeButton","Title","id","Body","onClick","onClick1","onClick2","Footer","Button","onClick3","WorkProperties","EditionProperties","EditionGroupProperties","EntitySpecificProperties","type","styles","content","marginTop","textInput","marginLeft","width","textAlign","links","textDecoration","entitySpecificProperties","borderWidth","borderColor","EntityForm","useState","entityType","setEntityType","showModal","setShowModal","Form","style","Group","as","Row","controlId","Label","column","sm","Col","Control","custom","href","tabs","marginRight","App","className","Tabs","defaultActiveKey","Tab","eventKey","title","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.1e245210.chunk.js","sourcesContent":["import React from 'react';\nimport {Button, Modal} from \"react-bootstrap\";\nimport * as PropTypes from \"prop-types\";\n\nfunction EntityTypeModal(props) {\n    return <Modal show={props.show} onHide={props.onHide} centered>\n        <Modal.Header closeButton>\n            <Modal.Title id=\"contained-modal-title-vcenter\">\n                Choose Entity Type\n            </Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n            <button onClick={props.onClick}>\n                <div>\n                    <h3>Work</h3>\n                    <p>\"a distinct intellectual or artistic creation expressed in words and/or images. Here we are not\n                        talking, for example, about a physical book, but the introduction, story, illustrations, etc. it\n                        contains.\n                        Examples: novel, poem, translation, introduction & foreword, article, research paper, etc.\"</p>\n                </div>\n            </button>\n            <button onClick={props.onClick1}>\n                <div>\n                    <h3>Edition</h3>\n                    <p>\"a published physical or digital version of one or more Works.\n                        Examples: book, anthology, comic book, magazine, leaflet\n                        Note: An Author can self-publish an Edition</p>\n                </div>\n            </button>\n            <button onClick={props.onClick2}>\n                <div>\n                    <h3>Edition Group</h3>\n                    <p>\"a logical grouping of different Editions of the same book.\n                        Example: paperback, hardcover and e-book editions of a novel\"</p>\n                </div>\n            </button>\n        </Modal.Body>\n        <Modal.Footer>\n            <Button onClick={props.onClick3}>Close</Button>\n        </Modal.Footer>\n    </Modal>;\n}\n\nEntityTypeModal.propTypes = {\n    show: PropTypes.bool,\n    onHide: PropTypes.func,\n    onClick: PropTypes.func,\n    onClick1: PropTypes.func,\n    onClick2: PropTypes.func,\n    onClick3: PropTypes.func\n};\n\nexport default EntityTypeModal;","import React from 'react';\n\nconst WorkProperties = () => {\n    return <p>\"WorkProperties\"</p>\n}\n\nexport default WorkProperties;\n","import React from 'react';\n\nconst EditionProperties = () => {\n    return <p>\"EditionProperties\"</p>\n}\n\nexport default EditionProperties;\n","import React from 'react';\n\nconst EditionGroupProperties = () => {\n    return <p>\"EditionGroupProperties\"</p>\n}\n\nexport default EditionGroupProperties;\n","import React from 'react';\nimport WorkProperties from './WorkProperties';\nimport EditionProperties from './EditionProperties';\nimport EditionGroupProperties from './EditionGroupProperties';\n\nconst EntitySpecificProperties = ({type}) => {\n  if (type === \"Work\") {\n      return <WorkProperties />\n  } else if (type === \"Edition\") {\n      return <EditionProperties />\n  } else if (type === \"Edition Group\") {\n      return <EditionGroupProperties />\n  } else {\n      return null\n  }\n};\n\nexport default EntitySpecificProperties;","import React, {useState} from 'react';\nimport {Form, Col, Row, Button, Modal} from 'react-bootstrap';\nimport EntityTypeModal from \"./EntityTypeModal\";\nimport EntitySpecificProperties from \"./EntitySpecificProperties\";\n// import TypeOptionCard from './typeOptionCard';\n\nconst EntityForm =  () => {\n    let [entityType, setEntityType] = useState(\"Work\");\n    let [showModal, setShowModal] = useState(false);\n    return (\n        <Form style={styles.content}>\n            <Form.Group as={Row} controlId=\"entityName\" style={styles.textInput}>\n                <Form.Label column sm=\"3\">Name</Form.Label>\n                <Col sm=\"8\">\n                    <Form.Control type=\"text\"/>\n                </Col>\n            </Form.Group>\n            <Form.Group as={Row} controlId=\"entitySortName\" style={styles.textInput}>\n                <Form.Label column sm=\"3\">Sort Name</Form.Label>\n                <Col sm=\"8\">\n                    <Form.Control type=\"text\"/>\n                </Col>\n            </Form.Group>\n            <Form.Group as={Row} controlId=\"entityLanguage\" style={styles.textInput}>\n                <Form.Label column sm=\"3\">Language</Form.Label>\n                <Col sm=\"8\">\n                    <Form.Control as=\"select\" custom>\n                        <option>LanguageA</option>\n                        <option>LanguageB</option>\n                        <option>LanguageC</option>\n                        <option>LanguageD</option>\n                        <option>LanguageE</option>\n                    </Form.Control>\n                </Col>\n            </Form.Group>\n            <Form.Group as={Row} controlId=\"entityType\" style={styles.textInput}>\n                <Form.Label column sm=\"3\">Entity Type</Form.Label>\n                <Col sm=\"8\">\n                    <Button onClick={() => {\n                        setShowModal(true);\n                    }}>{entityType}</Button>\n                </Col>\n                <EntityTypeModal show={showModal} onHide={() => setShowModal(false)} onClick={() => {\n                    setEntityType(\"Work\");\n                    setShowModal(false);\n                }} onClick1={() => {\n                    setEntityType(\"Edition\");\n                    setShowModal(false);\n                }} onClick2={() => {\n                    setEntityType(\"Edition Group\")\n                    setShowModal(false);\n                }} onClick3={() => {\n                    setShowModal(false);\n                }}/>\n            </Form.Group>\n            <Form.Group as={Row} controlId=\"entityAlias\" style={styles.links}>\n                <Col sm=\"3\">\n                    <a href=\"#\">Add Alias</a>\n                </Col>\n                <Col sm=\"3\">\n                    <a href=\"#\">Add Identifiers</a>\n                </Col>\n                <Col sm=\"4\">\n                    <a href=\"#\">Add Disambiguation</a>\n                </Col>\n            </Form.Group>\n            <div style={styles.entitySpecificProperties}>\n                <EntitySpecificProperties type={entityType} />\n            </div>\n        </Form>\n    )\n};\n\nconst styles = {\n    content: {\n        marginTop: \"2%\",\n    },\n    textInput: {\n        marginLeft: \"10%\",\n        width: \"60%\",\n        textAlign: \"left\"\n    },\n    links: {\n        marginLeft: \"10%\",\n        width: \"60%\",\n        textDecoration: 'underline',\n    },\n    entitySpecificProperties: {\n        marginLeft: \"10%\",\n        borderWidth: 1,\n        borderColor: \"#000\",\n        width: \"60%\"\n    }\n};\n\nexport default EntityForm;","import React from 'react';\nimport {Tabs, Tab} from 'react-bootstrap';\nimport EntityForm from './Components/EntityForm';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Tabs defaultActiveKey=\"entity1\" id=\"uncontrolled-tab-example\" style={styles.tabs}>\n        <Tab eventKey=\"entity1\" title=\"Entity1\">\n          <EntityForm />\n        </Tab>\n        <Tab eventKey=\"add\" title=\"+\">\n          <p>{\"Add\"}</p>\n        </Tab>\n      </Tabs>\n    </div>\n  );\n}\n\nconst styles = {\n  tabs: {\n    marginRight: 20,\n    marginLeft: 20,\n    borderWidth: 1,\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}